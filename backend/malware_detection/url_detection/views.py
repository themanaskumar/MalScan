from django.shortcuts import render

# Create your views here.
import joblib
import os
import re
from urllib.parse import urlparse
from django.http import JsonResponse
from rest_framework.decorators import api_view
import pandas as pd
from .serializers import URLInputSerializer

# Load the trained model
model_path = os.path.join(os.path.dirname(__file__), 'url_malware_detection_model.pkl')
model = joblib.load(model_path)

# Function to extract features from URLs
def extract_features(url):
    parsed_url = urlparse(url)
    domain = parsed_url.netloc
    path = parsed_url.path

    return {
        "url_length": len(url),
        "num_digits": len(re.findall(r'\d', url)),
        "num_special_chars": len(re.findall(r'[-.@_]', url)),
        "num_subdomains": len(parsed_url.netloc.split(".")) - 1,
        "has_https": 1 if parsed_url.scheme == "https" else 0,
        "domain_length": len(domain),
        "path_length": len(path),
        "has_login": 1 if "login" in path else 0,
        "has_payment": 1 if "payment" in path else 0,
        "num_subdirectories": path.count("/")
    }

@api_view(['POST'])
def predict_url_malware(request):
    """API endpoint for predicting whether a URL is malicious or safe."""
    serializer = URLInputSerializer(data=request.data)

    if serializer.is_valid():
        url = serializer.validated_data['url']
        
        # Extract features from the given URL
        features = extract_features(url)
        features_df = pd.DataFrame([features])

        # Make prediction
        prediction = model.predict(features_df)
        result = "Malicious" if prediction == 1 else "Safe"
        
        # Return JSON response
        return JsonResponse({"url": url, "prediction": result, "features": features, })
    
    return JsonResponse(serializer.errors, status=400)